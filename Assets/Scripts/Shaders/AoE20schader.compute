// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel SetCells;
#pragma kernel DrawCellsA;
#pragma kernel DrawCellsB;
#pragma kernel OneStep;

// Debug symbols
#pragma enable_d3d11_debug_symbols
#include "Cell.compute"
#include "Random.cginc"

uint width;
uint height;
uint imageWidth;
uint imageHeight;
RWTexture2D<float4> Result;
RWStructuredBuffer<Cell> CellsA, CellsB;
RWStructuredBuffer<uint> enchanceTableBuffer;
RWStructuredBuffer<uint> imageBuffer;

// Debugging
RWStructuredBuffer<uint2> debugBuffer;


uint FlatIndex(uint x, uint y, uint dimmX)
{
    return x + y * dimmX;
}

uint FlatIndex(uint2 index, uint2 dimm)
{
    return index.x + index.y * dimm.x;
}

// Function check if the cell is alive or dead
uint IsAlive(uint x, uint y)
{
    if(x < 0 || x >= width || y < 0 || y >= height)
        return 0;

    return CellsA[x + y * width].isAlive;
}

uint GetCode(uint x, uint y)
{
    uint code = 0;
    code |= IsAlive(x - 1, y - 1) << 0;
    code |= IsAlive(x, y - 1) << 1;
    code |= IsAlive(x + 1, y - 1) << 2;
    code |= IsAlive(x - 1, y) << 3;
    code |= IsAlive(x, y) << 4;
    code |= IsAlive(x + 1, y) << 5;
    code |= IsAlive(x - 1, y + 1) << 6;
    code |= IsAlive(x, y + 1) << 7;
    code |= IsAlive(x + 1, y + 1) << 8;

    return code;
}

[numthreads(1, 1, 1)]
void SetCells (uint3 id : SV_DispatchThreadID)
{
    // Boundary check
    if(id.x >= width || id.y >= height)
        return;

    uint flatIndex = id.x + (id.y * width);
    uint screenCenterX = width / 2;
    uint screenCenterY = height / 2;

    for(uint j=0; j<imageHeight; j++)
    {
        for(uint i=0; i<imageWidth; i++)
        {
            CellsA[i + j * width].isAlive = imageBuffer[i+j*imageWidth];
        }
    }
}

[numthreads(8, 8, 1)]
void DrawCellsA (uint3 id : SV_DispatchThreadID)
{
    // Boundary check
    if(id.x >= width || id.y >= height)
        return;

    uint flatIndex = id.x + (id.y * width);
    
    if(CellsA[flatIndex].isAlive == 1)
        Result[id.xy] = float4(0, 0, 1, 1);
    else
        Result[id.xy] = float4(0, 0, 0, 1);
}

[numthreads(8, 8, 1)]
void DrawCellsB (uint3 id : SV_DispatchThreadID)
{
    // Boundary check
    if(id.x >= width || id.y >= height)
        return;

    // Make flatIdex with y up to down
    uint flatIndex = id.x + (id.y * width);
    
    if(CellsB[flatIndex].isAlive == 1)
        Result[id.xy] = float4(0, 0, 1, 1);
    else
        Result[id.xy] = float4(0, 0, 0, 1);
}

[numthreads(8,8,1)]
void OneStep (uint3 id : SV_DispatchThreadID)
{
    if(any(id.xy >= uint2(width, height) || id.xy < uint2(0, 0)))
        return;

    uint flatIndex = id.x + (id.y * width);
    uint flatIndexPlus = (id.x+2) + ((id.y+2) * width);
    
    uint code = GetCode(id.x, id.y);

    CellsB[flatIndexPlus].isAlive = enchanceTableBuffer[code];
    CellsB[flatIndexPlus].value = code;

    // Draw cell on texture
    if(CellsB[flatIndex].isAlive == 1)
        Result[id.xy] = float4(0.5, 0.5, 0.5, 1);
    else
        Result[id.xy] = float4(0, 0, 0, 1);
}