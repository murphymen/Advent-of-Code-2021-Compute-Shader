// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel SetCells;
#pragma kernel OneStep;

#include "Cell.compute"

uint width;
uint height;
RWTexture2D<float4> Result;
RWStructuredBuffer<uint> CellsA, CellsB;
RWStructuredBuffer<uint> DebugBufferA;

// Function check if the cell is alive or dead
bool IsAlive(uint x, uint y)
{
    if(x < 0 || x >= width || y < 0 || y >= height)
        return 0;

    return CellsA[x + y * width];
}

[numthreads(8, 8, 1)]
void SetCells (uint3 id : SV_DispatchThreadID)
{
    // Boundary check
    if(id.x >= width || id.y >= height)
        return;

    uint flatIndex = id.x + (id.y * width);
    uint tmp = 1;

    CellsA[flatIndex] = tmp;
    //CellsB[id.x + id.y * width].isAlive = 1;

    CellsA[100] = 1;
    CellsA[101] = 1;
    CellsA[102] = 1;
    CellsA[103] = 1;

/*
    uint tmp = 0;
    if(id.x > 2 && id.x < 4)
        tmp = 1;
    else
        tmp = 0;
        */
    
    tmp = CellsA[flatIndex];

    if(CellsA[flatIndex] == 1)
        Result[id.xy] = float4(1,1,1,1);//float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 1);
    else
        Result[id.xy] = float4(0, 0, 0, 1);

    //Result[id.xy] = float4(1,1,1,1);

    DebugBufferA[flatIndex] = flatIndex;
}

[numthreads(8,8,1)]
void OneStep (uint3 id : SV_DispatchThreadID)
{
    if(any(id.xy >= uint2(width, height) || id.xy < uint2(0, 0)))
        return;

    int count = 0;
    // Check the 8 cells around the current cell
    for(int i = -1; i <= 1; i++)
        for(int j = -1; j <= 1; j++)
            if(IsAlive(id.x + i, id.y + j))
                count++;

    int alive = 0;
    // If the cell is alive and has less than 2 or more than 3 neighbors, it dies
    if(IsAlive(id.x, id.y) && (count < 2 || count > 3))
        alive = CellsB[id.x + id.y * width] = 0;
    // If the cell is dead and has 3 neighbors, it becomes alive
    else if(!IsAlive(id.x, id.y) && count == 3)
        alive = CellsB[id.x + id.y * width] = 1;

    if(alive)
        Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 1);
    else
        Result[id.xy] = float4(0, 0, 0, 1);
}